{"version":3,"sources":["components/Navbar.js","components/MidContent.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","id","variant","expand","Container","Brand","href","Toggle","aria-controls","Collapse","className","Nav","navbar","fill","Link","active","disabled","buildMultiColorText","text","colors","result","i","length","MidContent","gameProgrammerText","options","strings","autoStart","loop","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TA2BeA,G,MArBA,WACX,OACI,kBAAC,IAAD,CAASC,GAAG,SAASC,QAAQ,OAAOC,OAAO,MACvC,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAQC,MAAT,CAAeC,KAAK,QAAQL,GAAG,SAA/B,oBACA,kBAAC,IAAQM,OAAT,CAAgBC,gBAAc,qBAC9B,kBAAC,IAAQC,SAAT,CAAkBR,GAAG,oBACjB,kBAACG,EAAA,EAAD,CAAWM,UAAU,uBACjB,kBAACC,EAAA,EAAD,CAAKC,QAAM,EAACC,MAAI,GACZ,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,QAAQI,UAAU,cAAcK,QAAM,GAArD,QACA,kBAACJ,EAAA,EAAIG,KAAL,CAAUR,KAAK,QAAQI,UAAU,eAAjC,YACA,kBAACC,EAAA,EAAIG,KAAL,CAAUR,KAAK,YAAYI,UAAU,cAAcM,UAAQ,GAA3D,aACA,kBAACL,EAAA,EAAIG,KAAL,CAAUR,KAAK,YAAYI,UAAU,cAAcM,UAAQ,GAA3D,kB,yBCGtBC,EAAsB,SAACC,EAAMC,GAE/B,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC7BD,GAAU,uBAAyBD,EAAOE,EAAIF,EAAOG,QAAU,MAAQJ,EAAKG,GAAK,UAErF,OAAOD,GAGIG,EAxBI,WACf,IAAIC,EAAqBP,EAAoB,OAAQ,CAAC,UAAW,UAAW,UAAW,YAAc,cAErG,OACI,kBAACb,EAAA,EAAD,CAAWH,GAAG,eACV,wBAAIS,UAAU,aAAd,yBACA,kBAAC,IAAD,CACIe,QAAS,CACLC,QAAS,CAACF,EAAoB,qBAC9BG,WAAW,EACXC,MAAM,OCDXC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1aee0844.chunk.js","sourcesContent":["import React from 'react'\r\nimport BNavbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Container from 'react-bootstrap/Container'\r\nimport './Navbar.scss'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <BNavbar id=\"navbar\" variant=\"dark\" expand=\"sm\">\r\n            <Container>\r\n                <BNavbar.Brand href=\"#home\" id=\"brand\">João Coutinho</BNavbar.Brand>\r\n                <BNavbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <BNavbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Container className=\"justify-content-end\">\r\n                        <Nav navbar fill>\r\n                            <Nav.Link href=\"#home\" className=\"navbar-item\" active>Home</Nav.Link>\r\n                            <Nav.Link href=\"#home\" className=\"navbar-item\">About me</Nav.Link>\r\n                            <Nav.Link href=\"#features\" className=\"navbar-item\" disabled>Portfolio</Nav.Link>\r\n                            <Nav.Link href=\"#features\" className=\"navbar-item\" disabled>Contact</Nav.Link>\r\n                        </Nav>\r\n                    </Container>\r\n                </BNavbar.Collapse>\r\n            </Container>\r\n        </BNavbar>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport './MidContent.scss'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Typewriter from 'typewriter-effect'\r\n\r\nconst MidContent = () => {\r\n    let gameProgrammerText = buildMultiColorText('Game', [\"#05e9e8\", \"#ff890b\", \"#dc80b1\", \"#e91313\"]) + ' Programmer'\r\n\r\n    return (\r\n        <Container id=\"mid-content\">\r\n            <h1 className=\"display-4\">Hi there, I'm João</h1>\r\n            <Typewriter\r\n                options={{\r\n                    strings: [gameProgrammerText, 'Software Engineer'],\r\n                    autoStart: true,\r\n                    loop: true\r\n                }} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst buildMultiColorText = (text, colors) => {\r\n    let result = ''\r\n    for (let i = 0; i < text.length; i++) {\r\n        result += \"<span style='color: \" + colors[i % colors.length] + \";'>\" + text[i] + \"</span>\"\r\n    }\r\n    return result\r\n}\r\n\r\nexport default MidContent","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport MidContent from './components/MidContent'\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <MidContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}